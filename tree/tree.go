package tree

import (
	"fmt"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	ltree "github.com/charmbracelet/lipgloss/tree"

	"github.com/charmbracelet/bubbles/key"
)

// Styles contains style definitions for this tree component. By default, these
// values are generated by DefaultStyles.
type Styles struct {
	SelectedNode    lipgloss.Style
	SelectionCursor lipgloss.Style
}

// DefaultStyles returns a set of default style definitions for this tree
// component.
func DefaultStyles() (s Styles) {
	s.SelectedNode = lipgloss.NewStyle().
		Background(lipgloss.Color("62")).
		Foreground(lipgloss.Color("230"))
	s.SelectionCursor = lipgloss.NewStyle().Foreground(lipgloss.Color("9"))

	return s
}

// KeyMap is the key bindings for different actions within the tree.
type KeyMap struct {
	Down key.Binding
	Up   key.Binding
	Quit key.Binding
}

// DefaultKeyMap is the default set of key bindings for navigating and acting
// upon the tree.
var DefaultKeyMap = KeyMap{
	Down: key.NewBinding(key.WithKeys("down", "j", "ctrl+n"), key.WithHelp("down", "next line")),
	Up:   key.NewBinding(key.WithKeys("up", "k", "ctrl+p"), key.WithHelp("up", "previous line")),
	Quit: key.NewBinding(key.WithKeys("q", "ctrl+c"), key.WithHelp("q", "quit")),
}

// Model is the Bubble Tea model for this tree element.
type Model struct {
	root *Item
	// KeyMap encodes the keybindings recognized by the widget.
	KeyMap KeyMap

	// Styles sets the styling for the tree
	Styles Styles

	// yOffset is the vertical offset of the selected node.
	yOffset int
}

// Tree is a node with children
type Item struct {
	tree    *ltree.Tree
	yOffset int

	// TODO: move to lipgloss.Tree?
	size int
}

func (t *Item) String() string {
	return t.tree.String()
}

// nolint
func (t *Item) Value() string {
	return t.tree.Value()
}

// nolint
func (t *Item) Children() ltree.Children {
	return t.tree.Children()
}

// nolint
func (t *Item) Hidden() bool {
	return t.tree.Hidden()
}

// nolint
// TODO: add ItemStyleFunc to the Node interface?
func (t *Item) ItemStyleFunc(f func(children ltree.Children, i int) lipgloss.Style) *Item {
	t.tree.ItemStyleFunc(f)
	return t
}

// nolint
// TODO: add ItemStyleFunc to the Node interface?
func (t *Item) EnumeratorStyleFunc(f func(children ltree.Children, i int) lipgloss.Style) *Item {
	t.tree.EnumeratorStyleFunc(f)
	return t
}

// nolint
func (t *Item) RootStyle(style lipgloss.Style) *Item {
	t.tree.RootStyle(style)
	return t
}

// nolint
func (t *Item) Child(child any) *Item {
	item := new(Item)
	item.tree = ltree.Root(child)
	switch child := child.(type) {
	case *Item:
		t.size = t.size + child.size
		t.tree.Child(child)
	default:
		item.size = 1
		t.size = t.size + item.size
		t.tree.Child(item)
	}

	return t
}

// nolint
func Root(root any) *Item {
	t := new(Item)
	t.size = 1
	t.tree = ltree.Root(root)
	return t
}

func updateStyles(t *Item, itemStyleFunc ltree.StyleFunc) {
	t.ItemStyleFunc(itemStyleFunc)
}

// New creates a new model with default settings.
func New(t *Item) Model {
	m := Model{
		root:   t,
		KeyMap: DefaultKeyMap,
		Styles: DefaultStyles(),
	}
	t.size = calcAttributes(t)
	m.updateStyles()
	return m
}

func calcAttributes(t *Item) int {
	rootSize := 1
	children := t.tree.Children()
	for i := 0; i < children.Length(); i++ {
		child := children.At(i)
		if child, ok := child.(*Item); ok {
			rootSize = rootSize + child.size
		}
	}

	setYOffsets(t)
	return rootSize
}

func setYOffsets(t *Item) {
	children := t.tree.Children()
	above := 0
	for i := 0; i < children.Length(); i++ {
		child := children.At(i)
		if child, ok := child.(*Item); ok {
			child.yOffset = t.yOffset + above + i + 1
			setYOffsets(child)
			above += child.size - 1
		}
	}
}

// YOffset returns the vertical offset of the selected node.
// Useful for scrolling to the selected node using a viewport.
func (m *Model) YOffset() int {
	return m.yOffset
}

func (m *Model) selectedNodeStyle() ltree.StyleFunc {
	return func(children ltree.Children, i int) lipgloss.Style {
		child := children.At(i)
		return m.nodeStyle(child)
	}
}

func (m *Model) nodeStyle(node ltree.Node) lipgloss.Style {
	switch node := node.(type) {
	case *Item:
		if node.yOffset == m.yOffset {
			return m.Styles.SelectedNode
		}
	}
	return lipgloss.NewStyle().Foreground(lipgloss.Color("1")).MaxHeight(1)
}

func (m *Model) updateStyles() {
	// TODO: add RootStyleFunc to the Node interface?
	m.root.RootStyle(m.nodeStyle(m.root))
	updateStyles(m.root, m.selectedNodeStyle())
}

// Update is the Bubble Tea update loop.
func (m Model) Update(msg tea.Msg) (Model, tea.Cmd) {
	var cmds []tea.Cmd

	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch {
		case key.Matches(msg, m.KeyMap.Down):
			m.yOffset = min(m.root.size-1, m.yOffset+1)
		case key.Matches(msg, m.KeyMap.Up):
			m.yOffset = max(0, m.yOffset-1)
		case key.Matches(msg, m.KeyMap.Quit):
			return m, tea.Quit
		}
	}

	// not sure why, but I think m.yOffset is captured in the closure, so we need to update the styles
	m.updateStyles()
	return m, tea.Batch(cmds...)
}

// View renders the component.
func (m Model) View() string {
	s := fmt.Sprintf("yOffset: %d\n", m.yOffset)

	// TODO: remove
	debug := printDebugInfo(m.root)

	cursor := ""
	for i := 0; i < m.root.size; i++ {
		if i == m.yOffset {
			cursor = cursor + m.Styles.SelectedNode.Render("> ")
		} else {
			cursor = cursor + "  "
		}
		cursor = cursor + "\n"
	}

	t := lipgloss.JoinHorizontal(
		lipgloss.Top,
		lipgloss.NewStyle().Faint(true).MarginRight(1).Render(debug),
		cursor,
		m.root.String(),
	)
	return lipgloss.JoinVertical(lipgloss.Left, s, t)
}

// TODO: remove
func printDebugInfo(t *Item) string {
	debug := fmt.Sprintf("size=%d yOffset=%d", t.size, t.yOffset)
	children := t.Children()
	for i := 0; i < children.Length(); i++ {
		child := children.At(i)
		if child, ok := child.(*Item); ok {
			debug = debug + "\n" + printDebugInfo(child)
		}
	}

	return debug
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
