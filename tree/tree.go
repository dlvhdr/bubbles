package tree

import (
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	ltree "github.com/charmbracelet/lipgloss/tree"

	"github.com/charmbracelet/bubbles/key"
)

// Styles contains style definitions for this tree component. By default, these
// values are generated by DefaultStyles.
type Styles struct {
	SelectedNode    lipgloss.Style
	SelectionCursor lipgloss.Style
}

// DefaultStyles returns a set of default style definitions for this tree
// component.
func DefaultStyles() (s Styles) {
	s.SelectedNode = lipgloss.NewStyle().
		Background(lipgloss.Color("62")).
		Foreground(lipgloss.Color("230"))
	s.SelectionCursor = lipgloss.NewStyle().Foreground(lipgloss.Color("9"))

	return s
}

// KeyMap is the key bindings for different actions within the tree.
type KeyMap struct {
	Down key.Binding
	Up   key.Binding
}

// DefaultKeyMap is the default set of key bindings for navigating and acting
// upon the tree.
var DefaultKeyMap = KeyMap{
	Down: key.NewBinding(key.WithKeys("down", "j", "ctrl+n"), key.WithHelp("down", "next line")),
	Up:   key.NewBinding(key.WithKeys("up", "k", "ctrl+p"), key.WithHelp("up", "previous line")),
}

// Model is the Bubble Tea model for this tree element.
type Model struct {
	tree *Tree
	// KeyMap encodes the keybindings recognized by the widget.
	KeyMap KeyMap

	// Styles sets the styling for the tree
	Styles Styles

	// selectedValue is the value of the selected node.
	selectedValue string
}

// Leaf is a node without children.
type Leaf struct {
	ltree.Leaf
}

// Tree is a node with children
type Tree struct {
	*ltree.Tree
}

// New creates a new model with default settings.
func New() Model {
	t := ltree.New()
	m := Model{
		tree:          &Tree{t},
		KeyMap:        DefaultKeyMap,
		Styles:        DefaultStyles(),
		selectedValue: t.Value(),
	}
	t.ItemStyleFunc(m.selectedNodeStyle()).RootStyle(m.nodeStyle(t))
	return m
}

// Root sets the root value of this tree.
func (m *Model) Root(root any) *Model {
	m.tree.Root(root)
	return m
}

// Root sets the root value of this tree.
func (m *Model) Child(child any) *Model {
	m.tree.Child(child)
	return m
}

func (m Model) selectedNodeStyle() func(children ltree.Children, i int) lipgloss.Style {
	return func(children ltree.Children, i int) lipgloss.Style {
		child := children.At(i)
		return m.nodeStyle(child)
	}
}

func (m Model) nodeStyle(node ltree.Node) lipgloss.Style {
	st := lipgloss.NewStyle().MaxHeight(1)
	if node.Value() == m.selectedValue {
		st = m.Styles.SelectedNode
	}
	return st
}

// Update is the Bubble Tea update loop.
func (m Model) Update(msg tea.Msg) (Model, tea.Cmd) {
	var cmds []tea.Cmd

	switch msg.(type) {
	case tea.KeyMsg:
		return m, tea.Quit
	}

	return m, tea.Batch(cmds...)
}

// View renders the component.
func (m Model) View() string {
	return lipgloss.JoinHorizontal(
		lipgloss.Top,
		m.Styles.SelectionCursor.Render("> "),
		m.tree.String(),
	)
}
